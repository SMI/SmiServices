#nullable enable



//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.10.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace Setup {
    using Rdmp.Core.ReusableLibraryCode;
    using Rdmp.Core.ReusableLibraryCode.Checks;
    using System;
    using System.Collections.Generic;
    using System.IO;
    using Terminal.Gui;
    using Attribute = Terminal.Gui.Attribute;

    public partial class MainWindow {
        private EnvironmentProbe _probe;

        private readonly ColorScheme _goodScheme;
        private readonly ColorScheme _badScheme;

        /// <summary>
        /// The currently selected yaml file
        /// </summary>
        public string? YamlFile => tbDefaultYaml.Text.ToString();

        /// <summary>
        /// The last contents of the yaml config file.  If there are no changes
        /// then we don't bother clearing the probe in <see cref="ReloadYaml"/>
        /// </summary>
        private string _lastYaml = "";

        public MainWindow() {
            InitializeComponent();

            _goodScheme = new ColorScheme
            {
                Normal = new Attribute(Color.Green, ColorScheme.Normal.Background),
                HotNormal = new Attribute(Color.Green, ColorScheme.HotNormal.Background),
                Disabled = new Attribute(Color.Green, ColorScheme.Disabled.Background),
                Focus = new Attribute(Color.Green, ColorScheme.Focus.Background),
                HotFocus = new Attribute(Color.Green, ColorScheme.HotFocus.Background),
            };

            _badScheme = new ColorScheme
            {
                Normal = new Attribute(Color.Red, ColorScheme.Normal.Background),
                HotNormal = new Attribute(Color.Red, ColorScheme.HotNormal.Background),
                Disabled = new Attribute(Color.Red, ColorScheme.Disabled.Background),
                Focus = new Attribute(Color.Red, ColorScheme.Focus.Background),
                HotFocus = new Attribute(Color.Red, ColorScheme.HotFocus.Background),
            };

            // load the yaml and update system status
            tbDefaultYaml.Text = SetupSettings.YamlFile;

            ReloadYaml();

            if (_probe == null)
                throw new Exception("ReloadYaml failed to load probe somehow!");

            SetCheckboxStates();

            tbDefaultYaml.TextChanged += TbDefaultYaml_TextChanged;

            RegisterEvents(cbYamlValid, "Deserialize Yaml",() => _probe.DeserializeYaml);
            RegisterEvents(cbRabbitMq, "Connect to RabbitMQ", ()=>_probe.Probes["RabbitMq"].Result);
            RegisterEvents(cbMongoDb, "Connect to MongoDb", ()=>_probe.Probes["MongoDb"].Result);
            RegisterEvents(cbRdmp, "Connect to RDMP", ()=>_probe.Probes["Rdmp"].Result);

            RegisterEvents(cbDicomTagReader, "Dicom Tag Reader", ()=>_probe.Probes["DicomTagReader"].Result);
            RegisterEvents(cbMongoDbPopulator, "Mongo Db Populator", ()=>_probe.Probes["MongoDbPopulator"].Result);
            RegisterEvents(cbIdentifierMapper, "Identifier Mapper", ()=>_probe.Probes["IdentifierMapper"].Result);
            RegisterEvents(cbDicomRelationalMapper, "Dicom Relational Mapper", ()=>_probe.Probes["DicomRelationalMapper"].Result);

            RegisterEvents(cbCohortExtractor, "Cohort Extractor", ()=>_probe.Probes["CohortExtractor"].Result);
            RegisterEvents(cbDicomAnonymiser, "Dicom Anonymiser", ()=>_probe.Probes["DicomAnonymiser"].Result);
            RegisterEvents(cbIsIdentifiable, "IsIdentifiable", ()=>_probe.Probes["IsIdentifiable"].Result);
            RegisterEvents(cbCohortPackager, "Cohort Packager", ()=>_probe.Probes["CohortPackager"].Result);

            btnBrowseForDefaultYaml.Clicked += BtnBrowseForDefaultYaml_Clicked;
            btnCheckInfrastructure.Clicked += BtnCheckInfrastructure_Clicked;
            btnCheckMicroservices.Clicked += BtnCheckMicroservices_Clicked;

            RegisterTry(btnTryRabbitMq, static p=>p.Probes["RabbitMq"]);
            RegisterTry(btnTryMongoDb, static p=>p.Probes["MongoDb"]);
            RegisterTry(btnTryRdmp, static p=>p.Probes["Rdmp"]);
        }


        private void RegisterTry(Button btn, Func<EnvironmentProbe,Probeable> probeFunc)
        {
            btn.Clicked += ()=>{
                ReloadYaml();
                var probe = probeFunc(_probe);

                 // clear old result
                probe.Result = null;
                probe.Result = probe.Run();

                SetCheckboxStates();
                    };

        }

        private void ReloadYaml()
        {
            var f = tbDefaultYaml.Text.ToString();
            if(File.Exists(f))
            {
                var newYaml = File.ReadAllText(f);
                
                // no need to generate a new probe because the yaml has not changed
                if (string.Equals(newYaml, _lastYaml))
                    return;

                _lastYaml = newYaml;
            }

            _probe = new EnvironmentProbe(tbDefaultYaml.Text.ToString());
        }

        private void RegisterEvents(CheckBox cb, string taskTitle, Func<CheckEventArgs?> resultGetter)
        {
            cb.KeyPress += (obj)=>{

                // only pay attention to keypresses if you have focus
                if (!cb.HasFocus)
                    return;

                // don't let user actually tick it themselves
                if (obj.KeyEvent.Key != Key.Enter && obj.KeyEvent.Key != Key.Space) return;

                obj.Handled = true;

                var result = resultGetter();

                if(result == null)
                {
                    MessageBox.Query(taskTitle, "Task not yet attempted", "Ok");
                }
                else
                if (result.Result == CheckResult.Success)
                {
                    result.GetSummary(out var title, out var body, out _, out _);
                    MessageBox.Query(title,body, "Ok");
                }
                else
                {

                    result.GetSummary(out var title, out var body, out _, out _);

                    if(result.Ex != null)
                    {
                        body += ExceptionHelper.ExceptionToListOfInnerMessages(result.Ex);
                    }

                    MessageBox.ErrorQuery(taskTitle, body, "Ok");                        
                }
            };
        }


        private void BtnCheckInfrastructure_Clicked()
        {
            ReloadYaml();
            _probe.CheckInfrastructure();
            SetCheckboxStates();
        }
        private void BtnCheckMicroservices_Clicked()
        {
            ReloadYaml();
            _probe.CheckMicroservices();
            SetCheckboxStates();
        }

        private void SetCheckboxStates()
        {
            SetState(cbYamlValid, _probe.DeserializeYaml);
            SetState(cbRabbitMq, _probe.Probes["RabbitMq"].Result);
            SetState(cbMongoDb, _probe.Probes["MongoDb"].Result);
            SetState(cbRdmp, _probe.Probes["Rdmp"].Result);

            SetState(cbDicomTagReader, _probe.Probes["DicomTagReader"].Result);
            SetState(cbMongoDbPopulator, _probe.Probes["MongoDbPopulator"].Result);
            SetState(cbIdentifierMapper, _probe.Probes["IdentifierMapper"].Result);
            SetState(cbDicomRelationalMapper, _probe.Probes["DicomRelationalMapper"].Result);

            SetState(cbCohortExtractor, _probe.Probes["CohortExtractor"].Result);
            SetState(cbDicomAnonymiser, _probe.Probes["DicomAnonymiser"].Result);
            SetState(cbIsIdentifiable, _probe.Probes["IsIdentifiable"].Result);
            SetState(cbCohortPackager, _probe.Probes["CohortPackager"].Result);
        }

        private void SetState(CheckBox cb, CheckEventArgs? result)
        {
            cb.Checked = result != null && result.Result == CheckResult.Success;

            if (result == null)
            {
                // if we haven't tried it yet use the default colors
                cb.ColorScheme = ColorScheme;
            }
            else
            {
                cb.ColorScheme = result.Result == CheckResult.Success ? _goodScheme : _badScheme;
            }
            
        }

        private void TbDefaultYaml_TextChanged(NStack.ustring obj)
        {
            var path = tbDefaultYaml.Text.ToString();
            SetupSettings.YamlFile = path ?? "";

            ReloadYaml();
            SetCheckboxStates();
        }

        private void BtnBrowseForDefaultYaml_Clicked()
        {
            var ofd = new OpenDialog("Yaml Config File", "Navigate to the config file for your services", new List<string> { ".yaml" });
            Application.Run(ofd);

            if (!ofd.Canceled && !string.IsNullOrEmpty(ofd.FilePath.ToString()))
            {
                tbDefaultYaml.Text = ofd.FilePath;

                ReloadYaml();
            }
        }
    }
}
