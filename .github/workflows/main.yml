---
name: main

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: "0 6 * * *"

defaults:
  run:
    shell: bash

env:
  # dotnet
  rdmp-cli-dir: "./rdmp-cli"
  db-password: "YourStrongPassw0rd"
  # java
  java-version: 11
  java-distribution: temurin
  # python
  python-version: 3.6

jobs:
  init:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}
      build_ref: ${{ steps.build_ref.outputs.build_ref }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: set matrix
        id: matrix
        run: |
          set -euxo pipefail
          matrix="$(jq --compact-output . .github/workflows/envs.json)"
          echo $matrix
          echo "matrix=$matrix" >> $GITHUB_OUTPUT
      - name: set build ref
        id: build_ref
        run: |
          set -euxo pipefail
          build_ref="$GITHUB_REF_NAME"
          [ "$GITHUB_REF_TYPE" != "tag" ] && build_ref="${GITHUB_SHA:0:6}"
          echo "build_ref=$build_ref" >> $GITHUB_OUTPUT
  smi:
    needs: [init]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.init.outputs.matrix) }}
    runs-on: ${{ matrix.image }}
    steps:
      - name: "[linux] enable disk caching"
        if: ${{ matrix.os == 'linux' }}
        run: sudo apt-get install -y libeatmydata1
      - name: checkout
        uses: actions/checkout@v3
      - name: "[windows] start MongoDB service"
        if: ${{ matrix.os == 'windows' }}
        shell: pwsh
        run: |
          sc.exe config MongoDB start= auto
          sc.exe start MongoDB
      - name: setup .NET
        # NOTE(rkm 2022-02-20) Uses global.json
        uses: actions/setup-dotnet@v3.0.3
      - name: download tessdata
        run: ./bin/smi/downloadTessdata.py
      - name: build, test, and package dotnet
        run: |
          # set -euxo pipefail
          # cov=""
          # [ "${{ matrix.os }}" == "windows" ] && cov="--no-coverage"
          # ./bin/smi/buildTestPackage.py \
          #     ${{ needs.init.outputs.build_ref }} \
          #     "$cov"
          dotnet test --configuration Release --verbosity quiet -p:Platform=x64 --settings ./data/nunit.runsettings \
              ./tests/microservices/Microservices.MongoDBPopulator.Tests/Microservices.MongoDBPopulator.Tests.csproj \
              /p:CollectCoverage=true /p:CoverletOutput="$(pwd)/coverage/" /p:Exclude="[*.Tests]*" || true
          ls -l ./coverage/
      - name: upload coverage
        if: ${{ matrix.os == 'linux' }}
        uses: codecov/codecov-action@v3.1.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage.cobertura.xml
          fail_ci_if_error: true
      - name: upload dist
        uses: actions/upload-artifact@v3
        with:
          name: SmiServices-${{ needs.init.outputs.build_ref }}.zip
          path: dist/${{ needs.init.outputs.build_ref }}/*
          if-no-files-found: error
